const materialsData = {
    "Steel/MS": { density: 7.85, color: "#71797E" },
    "Stainless Steel": { density: 8, color: "#CFD4D9" },
    Aluminum: { density: 2.7, color: "#D9DAD9" },
    "Aluminum 1100": { density: 2.71, color: "#D9DAD9" },
    "Aluminum 2011": { density: 2.83, color: "#D9DAD9" },
    "Aluminum 2014": { density: 2.8, color: "#D9DAD9" },
    "Aluminum 2017": { density: 2.8, color: "#D9DAD9" },
    "Aluminum 2024": { density: 2.78, color: "#D9DAD9" },
    "Aluminum 3003": { density: 2.73, color: "#D9DAD9" },
    "Aluminum 5005": { density: 2.7, color: "#D9DAD9" },
    "Aluminum 5052": { density: 2.68, color: "#D9DAD9" },
    "Aluminum 5056": { density: 2.64, color: "#D9DAD9" },
    "Aluminum 5083": { density: 2.66, color: "#D9DAD9" },
    "Aluminum 5086": { density: 2.66, color: "#D9DAD9" },
    "Aluminum 6061": { density: 2.7, color: "#D9DAD9" },
    "Aluminum 6063": { density: 2.7, color: "#D9DAD9" },
    "Aluminum 7050": { density: 2.83, color: "#D9DAD9" },
    "Aluminum 7075": { density: 2.81, color: "#D9DAD9" },
    "Aluminum 7178": { density: 2.83, color: "#D9DAD9" },
    Brass: { density: 8.5, color: "#C49E5B" },
    Bronze: { density: 8.78, color: "#CD7F32" },
    Copper: { density: 8.96, color: "#B87333" },
    "Cast Iron": { density: 7.2, color: "#61666A" },
    Nickel: { density: 8.9, color: "#727472" },
    "Nickel 200": { density: 8.9, color: "#727472" },
    "Nickel 400": { density: 8.8, color: "#727472" },
    "Nickel R-405": { density: 8.83, color: "#727472" },
    "Nickel K-500": { density: 8.44, color: "#727472" },
    "Nickel 600": { density: 8.47, color: "#727472" },
    "Nickel 625": { density: 8.44, color: "#727472" },
    "Nickel 800H": { density: 7.94, color: "#727472" },
    "Nickel 800AT": { density: 7.94, color: "#727472" },
    "Nickel 825": { density: 8.14, color: "#727472" },
    "Nickel 330": { density: 7.94, color: "#727472" },
    "Nickel 20": { density: 8.08, color: "#727472" },
    "Nickel C-276": { density: 8.89, color: "#727472" },
    "Nickel 2545MD": { density: 7.94, color: "#727472" },
    Magnesium: { density: 1.74, color: "#c1c2c3" },
    Beryllium: { density: 1.85, color: "#c0c0c0" },
    Titanium: { density: 4.51, color: "#7A7772" },
    Zirconium: { density: 6.52, color: "#EDF0F1" },
    Zinc: { density: 7.14, color: "#BAC4C8" },
    Columbium: { density: 8.57, color: "#727472" },
    Molybdenum: { density: 10.22, color: "#96919c" },
    Silver: { density: 10.49, color: "#C0C0C0" },
    Lead: { density: 11.34, color: "#212121" },
    Tantalum: { density: 16.69, color: "#A0A0AB" },
    Tungsten: { density: 19.25, color: "#b5ac9f" },
    Gold: { density: 19.32, color: "#FFD700" },
    Platinum: { density: 21.45, color: "#E5E4E2" },
    Chrome: { density: 7.19, color: "#C0C0C0" },
    Mercury: { density: 13.53, color: "#C0C0C0" },
    Tin: { density: 7.31, color: "#C0C0C0" },
    "PB/Gunmetal": { density: 8.78, color: "#2C3539" },
    Potassium: { density: 0.86, color: "#E8E8E8" },
  },
  shapesData = {
    Round: {
      params: ["Diameter", "Length"],
      formula: "π × (d/2)² × length × density",
    },
    Square: {
      params: ["Width", "Length"],
      formula: "width² × length × density",
    },
    "Rectangle/Plate/Sheet": {
      params: ["Width", "Height", "Length"],
      formula: "width × height × length × density",
    },
    Hexagonal: {
      params: ["Diameter", "Length"],
      formula: "3√3/2 × (d/2)² × length × density",
    },
    Octagonal: {
      params: ["Diameter", "Length"],
      formula: "2(1+√2) × (d/2)² × length × density",
    },
    Pipe: {
      params: ["Outer Diameter", "Wall Thickness", "Length"],
      formula: "π × ((OD/2)² - ((OD-2×wall)/2)²) × length × density",
    },
    Ring: {
      params: ["Outer Diameter", "Inner Diameter", "Thickness"],
      formula: "π × ((OD/2)² - (ID/2)²) × thickness × density",
    },
    "Hexagonal (Round)": {
      params: ["Outer Diameter", "Wall Thickness", "Length"],
      formula: "3√3/2 × ((OD/2)² - π×((OD-2×wall)/2)²) × length × density",
    },
    "Square (Round)": {
      params: ["Width", "Inner Diameter", "Length"],
      formula: "(width² - π×(ID/2)²) × length × density",
    },
    "Square Pipe": {
      params: ["Width", "Wall Thickness", "Length"],
      formula: "(width² - (width-2×wall)²) × length × density",
    },
    "Rectangle Pipe": {
      params: ["Width", "Height", "Wall Thickness", "Length"],
      formula:
        "(width×height - (width-2×wall)×(height-2×wall)) × length × density",
    },
    Triangle: {
      params: ["Width", "Height", "Length"],
      formula: "0.5 × width × height × length × density",
    },
    Sphere: { params: ["Diameter"], formula: "(4/3) × π × (d/2)³ × density" },
    "Trapezoid/Trapezium": {
      params: ["Width 1", "Width 2", "Height", "Length"],
      formula: "0.5 × (W1 + W2) × height × length × density",
    },
    Oval: {
      params: ["Width", "Height", "Length"],
      formula: "π × (width/2) × (height/2) × length × density",
    },
    "CR Square": {
      params: ["Width", "Corner Radius", "Length"],
      formula: "(width² - 4×radius² + π×radius²) × length × density",
    },
    "CR Rectangle": {
      params: ["Width", "Height", "Corner Radius", "Length"],
      formula: "(width×height - 4×radius² + π×radius²) × length × density",
    },
    Angle: {
      params: ["Width", "Height", "Thickness 1", "Thickness 2", "Length"],
      formula: "(width×T1 + height×T2 - T1×T2) × length × density",
    },
    Channel: {
      params: ["Width", "Height", "Thickness 1", "Thickness 2", "Length"],
      formula: "(width×T1 + 2×height×T2 - 2×T1×T2) × length × density",
    },
    "T Bar": {
      params: ["Width", "Height", "Thickness 1", "Thickness 2", "Length"],
      formula: "(width×T1 + (height-T1)×T2) × length × density",
    },
    "I Beam": {
      params: [
        "Width",
        "Height",
        "Flange Thickness",
        "Web Thickness",
        "Length",
      ],
      formula:
        "(2×width×flange_T + (height-2×flange_T)×web_T) × length × density",
    },
    "C Shape": {
      params: ["Width", "Height", "Thickness", "Gap", "Length"],
      formula: "width×T + 2×(height-gap)×T × length × density",
    },
    "E Shape": {
      params: ["Width", "Height", "Thickness 1", "Thickness 2", "Length"],
      formula: "(3×width×T1 + 2×(height-T1)×T2) × length × density",
    },
  };
function init() {
  console.log("Initializing enhanced application..."),
    loadMaterials(),
    loadShapes();
  try {
    "undefined" != typeof THREE
      ? initThreeJS()
      : console.warn(
          "Three.js not loaded, continuing without 3D visualization"
        );
  } catch (e) {
    console.error("Error initializing Three.js:", e);
  }
  document.getElementById("shape").addEventListener("change", updateDimensions),
    document
      .getElementById("material")
      .addEventListener("change", updateVisualization),
    document
      .getElementById("shape")
      .addEventListener("change", updateVisualization),
    window.addEventListener("orientationchange", function () {
      setTimeout(function () {
        "function" == typeof onWindowResize && onWindowResize();
      }, 100);
    }),
    window.addEventListener("resize", function () {
      "function" == typeof onWindowResize && onWindowResize();
    });
}
function loadMaterials() {
  const e = document.getElementById("material");
  e &&
    Object.keys(materialsData).forEach((t) => {
      const n = document.createElement("option");
      (n.value = t), (n.textContent = t), e.appendChild(n);
    });
}
function loadShapes() {
  const e = document.getElementById("shape");
  e &&
    Object.keys(shapesData).forEach((t) => {
      const n = document.createElement("option");
      (n.value = t), (n.textContent = t), e.appendChild(n);
    });
}
function updateDimensions() {
  const e = document.getElementById("shape").value,
    t = document.getElementById("dimensions");
  if ((document.getElementById("results").classList.add("hidden"), !e))
    return void (t.innerHTML = "");
  const n = shapesData[e].params;
  let r = "";
  n.forEach((e, t) => {
    r += `\n            <div class="dimension-row">\n                <label class="dimension-label">${e}</label>\n                <div class="dimension-input">\n                    <div class="form-group">\n                        <input type="number" id="param${
      t + 1
    }" step="0.001" min="0.001" placeholder="Enter ${e.toLowerCase()}">\n                    </div>\n                    <div class="form-group">\n                        <select id="unit${
      t + 1
    }">\n                            <option value="in">in</option>\n                            <option value="ft">ft</option>\n                            <option value="yd">yd</option>\n                            <option value="mm">mm</option>\n                            <option value="cm">cm</option>\n                            <option value="m">m</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        `;
  }),
    (t.innerHTML = r),
    n.forEach((e, t) => {
      const n = document.getElementById(`param${t + 1}`),
        r = document.getElementById(`unit${t + 1}`);
      n && n.addEventListener("input", updateVisualization),
        r && r.addEventListener("change", updateVisualization);
    }),
    updateVisualization();
}
function updateVisualization() {
  const e = document.getElementById("material").value,
    t = document.getElementById("shape").value;
  if (!t) return;
  const n = e ? materialsData[e].color : "#8C9196",
    r = document.getElementById("shapeInfo"),
    o = document.getElementById("materialInfo");
  if (e) {
    const t = materialsData[e];
    o.innerHTML = `\n            <strong>${e}</strong><br>\n            Density: ${t.density} g/cm³\n        `;
  } else o.innerHTML = "";
  const i = {},
    a = shapesData[t];
  a &&
    a.params &&
    a.params.forEach((e, t) => {
      const n = document.getElementById(`param${t + 1}`),
        r = document.getElementById(`unit${t + 1}`);
      if (n && n.value && r) {
        const t = parseFloat(n.value),
          o = r.value;
        if (t > 0) {
          const n = convertToInches(t, o),
            r = e.toLowerCase();
          r.includes("diameter")
            ? r.includes("outer")
              ? (i.outerDiameter = n)
              : r.includes("inner")
              ? (i.innerDiameter = n)
              : (i.diameter = n)
            : r.includes("width")
            ? r.includes("1")
              ? (i.width1 = n)
              : r.includes("2")
              ? (i.width2 = n)
              : (i.width = n)
            : r.includes("height")
            ? (i.height = n)
            : r.includes("length")
            ? (i.length = n)
            : r.includes("thickness")
            ? r.includes("1")
              ? (i.thickness1 = n)
              : r.includes("2")
              ? (i.thickness2 = n)
              : r.includes("wall")
              ? (i.wall = n)
              : (i.thickness = n)
            : r.includes("wall")
            ? (i.wall = n)
            : r.includes("radius")
            ? (i.radius = n)
            : r.includes("gap") && (i.gap = n);
        }
      }
    }),
    "function" == typeof create3DShape && create3DShape(t, n, i),
    (r.textContent = `${t} - ${shapesData[t].formula}`);
}
function convertToCentimeters(e, t) {
  switch (t) {
    case "mm":
      return e / 10;
    case "cm":
      return e;
    case "m":
      return 100 * e;
    case "in":
      return 2.54 * e;
    case "ft":
      return 30.48 * e;
    case "yd":
      return 91.44 * e;
    default:
      return e;
  }
}
function convertToInches(e, t) {
  switch (t) {
    case "cm":
      return e / 2.54;
    case "m":
      return (100 * e) / 2.54;
    case "mm":
      return e / 10 / 2.54;
    case "ft":
      return 12 * e;
    case "yd":
      return 36 * e;
    default:
      return e;
  }
}
function calculateWeight() {
  const e = document.getElementById("material").value,
    t = document.getElementById("shape").value,
    n = parseFloat(document.getElementById("quantity").value) || 1;
  if (!e || !t) return void alert("Please select both material and shape");
  const r = shapesData[t],
    o = materialsData[e],
    i = [];
  for (let a = 1; a <= r.params.length; a++) {
    const e = parseFloat(document.getElementById(`param${a}`).value),
      t = document.getElementById(`unit${a}`).value;
    if (!e || e <= 0)
      return void alert(`Please enter a valid value for ${r.params[a - 1]}`);
    i.push(convertToCentimeters(e, t));
  }
  let a = 0;
  try {
    switch (t) {
      case "Round":
        const s = i[0] / 2;
        a = Math.PI * s * s * i[1];
        break;
      case "Sphere":
        const c = i[0] / 2;
        a = (4 / 3) * Math.PI * Math.pow(c, 3);
        break;
      case "Square":
        a = i[0] * i[0] * i[1];
        break;
      case "Rectangle":
      case "Plate":
      case "Sheet":
      case "Rectangle/Plate":
      case "Rectangle/Plate/Sheet":
        a = i[0] * i[1] * i[2];
        break;
      case "Hexagonal":
        const h = i[0] / 2;
        a = ((3 * Math.sqrt(3)) / 2) * h * h * i[1];
        break;
      case "Octagonal":
        const l = i[0] / 2;
        a = 2 * (1 + Math.sqrt(2)) * l * l * i[1];
        break;
      case "Pipe":
        const u = i[0] / 2,
          d = (i[0] - 2 * i[1]) / 2;
        if (d < 0)
          return void alert("Wall thickness cannot exceed outer diameter!");
        a = Math.PI * (u * u - d * d) * i[2];
        break;
      case "Square Pipe":
        const g = i[0] * i[0],
          p = i[0] - 2 * i[1];
        if (p <= 0)
          return void alert("Wall thickness too large for outer dimension!");
        const m = p * p;
        a = (g - m) * i[2];
        break;
      case "Rectangle Pipe":
        const f = i[0] * i[1],
          y = i[0] - 2 * i[2],
          v = i[1] - 2 * i[2];
        if (y <= 0 || v <= 0)
          return void alert("Wall thickness too large for outer dimensions!");
        const w = y * v;
        a = (f - w) * i[3];
        break;
      case "Triangle":
        a = 0.5 * i[0] * i[1] * i[2];
        break;
      case "Trapezoid":
      case "Trapezium":
      case "Trapezoid/Trapezium":
        a = 0.5 * (i[0] + i[1]) * i[2] * i[3];
        break;
      case "Oval":
        a = Math.PI * (i[0] / 2) * (i[1] / 2) * i[2];
        break;
      case "Ring":
        const b = i[0] / 2,
          T = i[1] / 2;
        if (T >= b)
          return void alert("Inner diameter must be less than outer diameter!");
        a = Math.PI * (b * b - T * T) * i[2];
        break;
      case "Hexagonal (Round)":
        const E = i[0] / 2,
          I = (i[0] - 2 * i[1]) / 2;
        if (I < 0)
          return void alert("Wall thickness cannot exceed outer diameter!");
        const R = ((3 * Math.sqrt(3)) / 2) * E * E,
          C = Math.PI * I * I;
        a = (R - C) * i[2];
        break;
      case "Square (Round)":
        const S = i[0] * i[0],
          x = i[1] / 2,
          A = Math.PI * x * x;
        a = (S - A) * i[2];
        break;
      case "CR Square":
        const D = i[0] * i[0] - 4 * i[1] * i[1] + Math.PI * i[1] * i[1];
        a = D * i[2];
        break;
      case "CR Rectangle":
        const P = i[0] * i[1] - 4 * i[2] * i[2] + Math.PI * i[2] * i[2];
        a = P * i[3];
        break;
      case "Angle":
        const k = i[0] * i[2] + i[1] * i[3] - i[2] * i[3];
        a = k * i[4];
        break;
      case "Channel":
        const L = i[0] * i[2] + 2 * i[1] * i[3] - 2 * i[2] * i[3];
        a = L * i[4];
        break;
      case "C Shape":
        const M = i[0] * i[2] + 2 * (i[1] - i[3]) * i[2];
        a = M * i[4];
        break;
      case "T Bar":
        const O = i[0] * i[2] + (i[1] - i[2]) * i[3];
        a = O * i[4];
        break;
      case "I Beam":
        const F = 2 * i[0] * i[2],
          N = (i[1] - 2 * i[2]) * i[3],
          B = F + N;
        a = B * i[4];
        break;
      case "E Shape":
        const U = 3 * i[0] * i[2] + 2 * (i[1] - i[2]) * i[3];
        a = U * i[4];
        break;
      default:
        a = i[0] * i[1] * (i[2] || 1);
    }
    const s = a * o.density * n,
      c = s / 1e3,
      h = 2.20462 * c,
      l = 16 * h;
    (document.getElementById("weightKgs").textContent = c.toFixed(3)),
      (document.getElementById("weightGrams").textContent = s.toFixed(2)),
      (document.getElementById("weightLbs").textContent = h.toFixed(3)),
      (document.getElementById("weightOunces").textContent = l.toFixed(2));
    const u = parseFloat(document.getElementById("rate").value),
      d = document.getElementById("rateUnit").value,
      g = document.getElementById("totalCost");
    if (u && u > 0) {
      let e = 0,
        t = "";
      switch (d) {
        case "per kg":
          (e = u * c), (t = u.toFixed(1) + "/kg");
          break;
        case "per lb":
          (e = u * h), (t = u.toFixed(1) + "/lb");
          break;
        case "per gram":
          (e = u * s), (t = u.toFixed(3) + "/g");
          break;
        case "per ounce":
          (e = u * l), (t = u.toFixed(3) + "/oz");
      }
      (document.getElementById("costValue").textContent = `(${t}) : ${e.toFixed(
        2
      )}`),
        g.classList.remove("hidden");
    } else g.classList.add("hidden");
    document.getElementById("results").classList.remove("hidden");
  } catch (s) {
    alert("Error in calculation: " + s.message);
  }
}
function clearForm() {
  (document.getElementById("material").value = ""),
    (document.getElementById("shape").value = ""),
    (document.getElementById("quantity").value = "1"),
    (document.getElementById("rate").value = ""),
    (document.getElementById("rateUnit").value = "per kg"),
    (document.getElementById("dimensions").innerHTML = ""),
    document.getElementById("results").classList.add("hidden"),
    "function" == typeof clearThreeJSVisualization &&
      clearThreeJSVisualization(),
    (document.getElementById("shapeInfo").textContent =
      "Choose a material and shape to see the 3D visualization"),
    (document.getElementById("materialInfo").innerHTML = "");
}
window.addEventListener("DOMContentLoaded", init);
